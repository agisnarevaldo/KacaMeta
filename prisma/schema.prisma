// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  slug        String    @unique @db.VarChar(100)
  description String?   @db.Text
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String      @db.VarChar(255)
  slug        String      @unique @db.VarChar(255)
  description String?     @db.Text
  price       Decimal     @db.Decimal(10, 2)
  stock       Int         @default(0)
  status      ProductStatus @default(AVAILABLE)
  badge       String?     @db.VarChar(50)
  images      String?     @db.Text // JSON array of image URLs
  categoryId  Int
  category    Category    @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([categoryId])
  @@index([status])
  @@map("products")
}

model Customer {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  email     String?  @unique @db.VarChar(255)
  phone     String   @db.VarChar(20)
  address   String?  @db.Text
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("customers")
}

model Order {
  id           Int         @id @default(autoincrement())
  orderNumber  String      @unique @db.VarChar(50)
  customerId   Int
  customer     Customer    @relation(fields: [customerId], references: [id])
  totalAmount  Decimal     @db.Decimal(10, 2)
  status       OrderStatus @default(PENDING)
  notes        String?     @db.Text
  orderItems   OrderItem[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([customerId])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique @db.VarChar(100)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  name      String   @db.VarChar(255)
  role      AdminRole @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
  PrescriptionConsultation PrescriptionConsultation[]
}

enum ProductStatus {
  AVAILABLE
  LOW_STOCK
  OUT_OF_STOCK
  DISCONTINUED
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
}

// Add to your schema.prisma

model BotpressSession {
  id                String   @id @default(cuid())
  botpressUserId    String   @unique
  phoneNumber       String?
  customerName      String?
  conversationId    String?
  sessionData       Json?
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  consultations     PrescriptionConsultation[]
  
  @@map("botpress_sessions")
}

model PrescriptionConsultation {
  id                String   @id @default(cuid())
  
  // Customer info
  customerName      String
  phoneNumber       String
  email             String?
  
  // Prescription data
  rightEyeSPH       String?
  rightEyeCYL       String?
  rightEyeAXIS      String?
  rightEyeADD       String?
  leftEyeSPH        String?
  leftEyeCYL        String?
  leftEyeAXIS       String?
  leftEyeADD        String?
  pd                String?
  
  // Files & notes
  prescriptionImage String?
  notes             String?
  framePreference   String?
  budgetRange       String?
  
  // Status tracking
  status            ConsultationStatus @default(PENDING)
  priority          ConsultationPriority @default(NORMAL)
  source            String @default("BOTPRESS")
  assignedTo        Int?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  responseDeadline  DateTime?
  
  // Relations
  assignedAdmin     Admin? @relation(fields: [assignedTo], references: [id])
  botpressSession   BotpressSession? @relation(fields: [botpressSessionId], references: [id])
  botpressSessionId String?
  
  @@map("prescription_consultations")
}

enum ConsultationStatus {
  PENDING
  IN_PROGRESS
  WAITING_CUSTOMER
  COMPLETED
  CANCELLED
}

enum ConsultationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}